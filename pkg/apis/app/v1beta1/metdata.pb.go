// Code generated by protoc-gen-go.
// source: metdata.proto
// DO NOT EDIT!

/*
Package v1beta1 is a generated protocol buffer package.

It is generated from these files:
	metdata.proto

It has these top-level messages:
	MetadataGetRequest
	MetadataGetResponse
	GitMetadata
	DockerMetadata
*/
package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetadataGetRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Registry string `protobuf:"bytes,3,opt,name=registry" json:"registry,omitempty"`
}

func (m *MetadataGetRequest) Reset()                    { *m = MetadataGetRequest{} }
func (m *MetadataGetRequest) String() string            { return proto.CompactTextString(m) }
func (*MetadataGetRequest) ProtoMessage()               {}
func (*MetadataGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetadataGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetadataGetRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetadataGetRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

type MetadataGetResponse struct {
	Status *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	// Types that are valid to be assigned to Metdata:
	//	*MetadataGetResponse_Git
	//	*MetadataGetResponse_Docker
	Metdata isMetadataGetResponse_Metdata `protobuf_oneof:"metdata"`
}

func (m *MetadataGetResponse) Reset()                    { *m = MetadataGetResponse{} }
func (m *MetadataGetResponse) String() string            { return proto.CompactTextString(m) }
func (*MetadataGetResponse) ProtoMessage()               {}
func (*MetadataGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isMetadataGetResponse_Metdata interface {
	isMetadataGetResponse_Metdata()
}

type MetadataGetResponse_Git struct {
	Git *GitMetadata `protobuf:"bytes,2,opt,name=git,oneof"`
}
type MetadataGetResponse_Docker struct {
	Docker *DockerMetadata `protobuf:"bytes,3,opt,name=docker,oneof"`
}

func (*MetadataGetResponse_Git) isMetadataGetResponse_Metdata()    {}
func (*MetadataGetResponse_Docker) isMetadataGetResponse_Metdata() {}

func (m *MetadataGetResponse) GetMetdata() isMetadataGetResponse_Metdata {
	if m != nil {
		return m.Metdata
	}
	return nil
}

func (m *MetadataGetResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MetadataGetResponse) GetGit() *GitMetadata {
	if x, ok := m.GetMetdata().(*MetadataGetResponse_Git); ok {
		return x.Git
	}
	return nil
}

func (m *MetadataGetResponse) GetDocker() *DockerMetadata {
	if x, ok := m.GetMetdata().(*MetadataGetResponse_Docker); ok {
		return x.Docker
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MetadataGetResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MetadataGetResponse_OneofMarshaler, _MetadataGetResponse_OneofUnmarshaler, _MetadataGetResponse_OneofSizer, []interface{}{
		(*MetadataGetResponse_Git)(nil),
		(*MetadataGetResponse_Docker)(nil),
	}
}

func _MetadataGetResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MetadataGetResponse)
	// metdata
	switch x := m.Metdata.(type) {
	case *MetadataGetResponse_Git:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Git); err != nil {
			return err
		}
	case *MetadataGetResponse_Docker:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Docker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("MetadataGetResponse.Metdata has unexpected type %T", x)
	}
	return nil
}

func _MetadataGetResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MetadataGetResponse)
	switch tag {
	case 2: // metdata.git
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GitMetadata)
		err := b.DecodeMessage(msg)
		m.Metdata = &MetadataGetResponse_Git{msg}
		return true, err
	case 3: // metdata.docker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DockerMetadata)
		err := b.DecodeMessage(msg)
		m.Metdata = &MetadataGetResponse_Docker{msg}
		return true, err
	default:
		return false, nil
	}
}

func _MetadataGetResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MetadataGetResponse)
	// metdata
	switch x := m.Metdata.(type) {
	case *MetadataGetResponse_Git:
		s := proto.Size(x.Git)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MetadataGetResponse_Docker:
		s := proto.Size(x.Docker)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GitMetadata struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Branches []string `protobuf:"bytes,2,rep,name=branches" json:"branches,omitempty"`
	Tags     []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *GitMetadata) Reset()                    { *m = GitMetadata{} }
func (m *GitMetadata) String() string            { return proto.CompactTextString(m) }
func (*GitMetadata) ProtoMessage()               {}
func (*GitMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GitMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GitMetadata) GetBranches() []string {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *GitMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type DockerMetadata struct {
	Name string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *DockerMetadata) Reset()                    { *m = DockerMetadata{} }
func (m *DockerMetadata) String() string            { return proto.CompactTextString(m) }
func (*DockerMetadata) ProtoMessage()               {}
func (*DockerMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DockerMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DockerMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*MetadataGetRequest)(nil), "appscode.apps.v1beta1.MetadataGetRequest")
	proto.RegisterType((*MetadataGetResponse)(nil), "appscode.apps.v1beta1.MetadataGetResponse")
	proto.RegisterType((*GitMetadata)(nil), "appscode.apps.v1beta1.GitMetadata")
	proto.RegisterType((*DockerMetadata)(nil), "appscode.apps.v1beta1.DockerMetadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metadata service

type MetadataClient interface {
	Get(ctx context.Context, in *MetadataGetRequest, opts ...grpc.CallOption) (*MetadataGetResponse, error)
}

type metadataClient struct {
	cc *grpc.ClientConn
}

func NewMetadataClient(cc *grpc.ClientConn) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) Get(ctx context.Context, in *MetadataGetRequest, opts ...grpc.CallOption) (*MetadataGetResponse, error) {
	out := new(MetadataGetResponse)
	err := grpc.Invoke(ctx, "/appscode.apps.v1beta1.Metadata/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metadata service

type MetadataServer interface {
	Get(context.Context, *MetadataGetRequest) (*MetadataGetResponse, error)
}

func RegisterMetadataServer(s *grpc.Server, srv MetadataServer) {
	s.RegisterService(&_Metadata_serviceDesc, srv)
}

func _Metadata_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.apps.v1beta1.Metadata/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).Get(ctx, req.(*MetadataGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.apps.v1beta1.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Metadata_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metdata.proto",
}

func init() { proto.RegisterFile("metdata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xc7, 0x2b, 0xa9, 0xd8, 0xf2, 0x0a, 0xf7, 0xb0, 0xa5, 0x54, 0x88, 0x7e, 0xb8, 0x2a, 0x85,
	0xb6, 0x07, 0x2d, 0x56, 0xa1, 0xb4, 0xa7, 0x80, 0x09, 0x38, 0x97, 0x80, 0xa3, 0x5c, 0x42, 0x6e,
	0x6b, 0x69, 0x51, 0x44, 0x22, 0xed, 0x46, 0x3b, 0x0e, 0x98, 0x90, 0x8b, 0xef, 0x39, 0xe5, 0x96,
	0xf7, 0xc8, 0x4b, 0xe4, 0x9a, 0x57, 0xc8, 0x83, 0x84, 0x5d, 0x49, 0x8e, 0x45, 0x2c, 0xc8, 0x65,
	0x99, 0x9d, 0x99, 0xdf, 0xfe, 0x67, 0x67, 0x06, 0x0d, 0x73, 0x06, 0x09, 0x05, 0x1a, 0x88, 0x92,
	0x03, 0xc7, 0x1f, 0xa8, 0x10, 0x32, 0xe6, 0x09, 0x0b, 0x94, 0x11, 0x5c, 0x8c, 0xe7, 0x0c, 0xe8,
	0xd8, 0xfb, 0x94, 0x72, 0x9e, 0x9e, 0x31, 0x42, 0x45, 0x46, 0x68, 0x51, 0x70, 0xa0, 0x90, 0xf1,
	0x42, 0x56, 0x90, 0xf7, 0xa5, 0x81, 0x3a, 0xe2, 0x5f, 0x5b, 0xf1, 0x04, 0x96, 0x82, 0x49, 0xa2,
	0xcf, 0x2a, 0xc1, 0x3f, 0x42, 0x78, 0x9f, 0x01, 0x55, 0x75, 0x4c, 0x19, 0x44, 0xec, 0x7c, 0xc1,
	0x24, 0x60, 0x8c, 0xde, 0x16, 0x34, 0x67, 0xae, 0x31, 0x32, 0x7e, 0x0e, 0x22, 0x6d, 0x2b, 0x9f,
	0x02, 0x5d, 0xb3, 0xf2, 0x29, 0x1b, 0x7b, 0xc8, 0x2e, 0x59, 0x9a, 0x49, 0x28, 0x97, 0xae, 0xa5,
	0xfd, 0xeb, 0xbb, 0x7f, 0x6f, 0xa0, 0xf7, 0xad, 0xa7, 0xa5, 0xe0, 0x85, 0x64, 0x98, 0xa0, 0x9e,
	0x04, 0x0a, 0x0b, 0xa9, 0x5f, 0x77, 0xc2, 0x8f, 0xc1, 0xfa, 0xe3, 0x55, 0x7d, 0xc1, 0xa1, 0x0e,
	0x47, 0x75, 0x1a, 0xfe, 0x8b, 0xac, 0x34, 0x03, 0xad, 0xeb, 0x84, 0x7e, 0xb0, 0xb5, 0x4d, 0xc1,
	0x34, 0x83, 0x46, 0x6c, 0xef, 0x4d, 0xa4, 0x00, 0xbc, 0x83, 0x7a, 0x09, 0x8f, 0x4f, 0x59, 0xa9,
	0x4b, 0x73, 0xc2, 0x1f, 0x1d, 0xe8, 0xae, 0x4e, 0xda, 0xa0, 0x6b, 0x6c, 0x32, 0x40, 0xfd, 0x7a,
	0x44, 0xfe, 0x01, 0x72, 0x36, 0x14, 0xb6, 0xf6, 0xc7, 0x43, 0xf6, 0xbc, 0xa4, 0x45, 0x7c, 0xc2,
	0xa4, 0x6b, 0x8e, 0x2c, 0xd5, 0x8b, 0xe6, 0xae, 0x7b, 0x47, 0x53, 0xe9, 0x5a, 0xda, 0xaf, 0x6d,
	0xff, 0x1f, 0x7a, 0xd7, 0x56, 0xee, 0xec, 0xba, 0x22, 0xcd, 0x67, 0x32, 0xbc, 0x35, 0x90, 0xbd,
	0x86, 0xae, 0x0d, 0x64, 0x4d, 0x19, 0xe0, 0x5f, 0x1d, 0xbf, 0x7b, 0x39, 0x5d, 0xef, 0xf7, 0x6b,
	0x52, 0xab, 0x69, 0xf9, 0x64, 0x75, 0xe7, 0x9a, 0xb6, 0xb1, 0x7a, 0x78, 0xbc, 0x31, 0xbf, 0xe3,
	0x6f, 0xd5, 0x9a, 0x09, 0x21, 0x49, 0x0d, 0x91, 0xbc, 0x86, 0xc8, 0xa5, 0x1a, 0xde, 0xd5, 0xe4,
	0x3f, 0xfa, 0x1c, 0xf3, 0x7c, 0x53, 0x21, 0x6b, 0xa9, 0x4c, 0x86, 0x8d, 0xcc, 0x4c, 0x2d, 0xe0,
	0xcc, 0x38, 0xee, 0xd7, 0x91, 0x79, 0x4f, 0xaf, 0xe4, 0x9f, 0xa7, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x25, 0x45, 0x4c, 0x67, 0x19, 0x03, 0x00, 0x00,
}
